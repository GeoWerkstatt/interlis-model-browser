// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModelRepoBrowser;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ModelRepoBrowser.Migrations
{
    [DbContext(typeof(RepoBrowserContext))]
    [Migration("20220726123456_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ModelRepoBrowser.Models.Catalog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<List<string>>("File")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Owner")
                        .HasColumnType("text");

                    b.Property<string>("PrecursorVersion")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublishingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("ReferencedModels")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("RepositoryHostNameId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryHostNameId");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("ModelRepoBrowser.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("DependsOnModel")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FurtherInformation")
                        .HasColumnType("text");

                    b.Property<string>("Issuer")
                        .HasColumnType("text");

                    b.Property<string>("MD5")
                        .HasColumnType("text");

                    b.Property<string>("ModelRepositoryHostNameId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublishingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SchemaLanguage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("TechnicalContact")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModelRepositoryHostNameId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("ModelRepoBrowser.Models.Repository", b =>
                {
                    b.Property<string>("HostNameId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<string>("TechnicalContact")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HostNameId");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("RepositoryRepository", b =>
                {
                    b.Property<string>("ParentSitesHostNameId")
                        .HasColumnType("text");

                    b.Property<string>("SubsidiarySitesHostNameId")
                        .HasColumnType("text");

                    b.HasKey("ParentSitesHostNameId", "SubsidiarySitesHostNameId");

                    b.HasIndex("SubsidiarySitesHostNameId");

                    b.ToTable("RepositoryRepository");
                });

            modelBuilder.Entity("ModelRepoBrowser.Models.Catalog", b =>
                {
                    b.HasOne("ModelRepoBrowser.Models.Repository", null)
                        .WithMany("Catalogs")
                        .HasForeignKey("RepositoryHostNameId");
                });

            modelBuilder.Entity("ModelRepoBrowser.Models.Model", b =>
                {
                    b.HasOne("ModelRepoBrowser.Models.Repository", "ModelRepository")
                        .WithMany("Models")
                        .HasForeignKey("ModelRepositoryHostNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelRepository");
                });

            modelBuilder.Entity("RepositoryRepository", b =>
                {
                    b.HasOne("ModelRepoBrowser.Models.Repository", null)
                        .WithMany()
                        .HasForeignKey("ParentSitesHostNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelRepoBrowser.Models.Repository", null)
                        .WithMany()
                        .HasForeignKey("SubsidiarySitesHostNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelRepoBrowser.Models.Repository", b =>
                {
                    b.Navigation("Catalogs");

                    b.Navigation("Models");
                });
#pragma warning restore 612, 618
        }
    }
}
